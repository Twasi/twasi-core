type User {
    id: String!
    twitchAccount: TwitchAccount!
    installedPlugins: [String]!
    installPlugin(name: String): PluginDetails
    uninstallPlugin(name: String): PluginDetails
    events: [EventMessage]!
    rank: UserRank,
    banner: String,
    pluginCommands: [PluginCommand]!
}

type PluginCommand {
    commandName: String!
    providingPlugin: String!
    listed: Boolean!
    timer: Boolean!
}

type EventMessage {
    message: String!
    messageType: EventMessageType!
    createdAt: String!
}

enum EventMessageType {
    ERROR,
    INFO,
    WARNING
}

enum UserRank {
    STREAMER,
    MODERATOR,
    VIEWER,
    TEAM
}

enum UserStatusType {
    OK,
    SETUP,
    MIGRATION,
    BANNED,
    MAINTENANCE
}

enum PanelResultType {
    OK,
    WARNING,
    ERROR
}

type PanelResult {
    status: PanelResultType,
    translationKey: String
}

type Setup {
    isSetUp: Boolean,
    setup(betaCode: String): Boolean,
    defaultPlugins: [PluginDetails]
}

type Config {
    language: String!
    isActivated: Boolean!
}

type Panel {
    user: User
    status: BotStatus,
    userStatus: UserStatus,
    appInfo: AppInfo,
    installedPlugins: [PluginDetails],
    availablePlugins: PluginDetailsPageable,
    support: Support,
    admin: Admin,
    availableLanguages: [String],
    themes: CustomThemes
}

type Admin {
    impersonate(twitchname: String): String
}

type BotStatus {
    isRunning: Boolean!,
    changeStatus(isRunning: Boolean): BotStatus,
    setLanguage(languageCode: String): Boolean
}

type AppInfo {
    version: String!
}

type UserStatus {
    status: UserStatusType
}

type TwitchAccount {
    name: String!
    displayName: String!
    twitchid: String!
    avatar: String!
    email: String!
    update: TwitchAccount
}

pageable type PluginDetails {
    isInstalled: Boolean!
    name: String!
    description: String!
    author: String!
    version: String!
    commands: [String]!
    permissions: [String]!
    id: String!
    installations: Long!,
    banner: String
}

type Support {
    myClosedTickets: SupportTicketPageable,
    myOpenTickets: SupportTicketPageable,
    closedAdminTickets: SupportTicketPageable,
    openAdminTickets: SupportTicketPageable,
    create(topic: String, message: String, category: String): SupportTicket,
    reply(id: String, message: String, close: Boolean, isAdminContext: Boolean): SupportTicket
}

pageable type SupportTicket {
    id: String,
    owner: SupportTicketUser,
    topic: String,
    messages: [SupportTicketMessage],
    state: String,
    category: String,
    createdAt: Long,
    closedAt: Long
}

type SupportTicketMessage {
    sender: SupportTicketUser,
    message: String,
    createdAt: Long,
    staff: Boolean
}

type SupportTicketUser {
    name: String,
    avatar: String
}

type Query {
    panel(token: String): Panel,
    setup(token: String): Setup%PLUGINS%
}

schema {
    query: Query
}

type CustomThemes {
    myThemes: StoreCustomThemePageable,
    installedThemes: [StoreCustomTheme],
    availableThemes(approvedOnly: Boolean): StoreCustomThemePageable,
    uninstall(themeId: String): PanelResult,
    install(themeId: String): PanelResult,
    create(name: String, theme: CustomThemeInput): PanelResult,
    approve(themeId: String): PanelResult
}

type CustomTheme {
    backgroundColor: String,
    buttonRadius: Int,
    panelRadius: Int,
    specialContentRadius: Int,
    panelBackgroundColor: String,
    fontColor: String,
    buttonFontColor: String,
    primaryColor: String,
    secondaryColor: String,
    specialContentColor: String,
    outlineTextLogo: String,
    shadowPrimaryTextLogo: String,
    shadowSecondaryTextLogo: String,
    mainTextLogo: String
}

input CustomThemeInput {
    backgroundColor: String,
    buttonRadius: Int,
    panelRadius: Int,
    specialContentRadius: Int,
    panelBackgroundColor: String,
    fontColor: String,
    buttonFontColor: String,
    primaryColor: String,
    secondaryColor: String,
    specialContentColor: String,
    outlineTextLogo: String,
    shadowPrimaryTextLogo: String,
    shadowSecondaryTextLogo: String,
    mainTextLogo: String
}

pageable type StoreCustomTheme {
    id: String,
    name: String,
    creator: String,
    created: String,
    installed: Boolean,
    approved: Boolean,
    theme: CustomTheme
}
